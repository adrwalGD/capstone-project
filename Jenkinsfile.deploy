pipeline {
    agent any

    parameters {
        string(name: 'STAGING_IMAGE_TAG', defaultValue: 'latest', description: 'The tag of the image to deploy to staging environment')
        string(name: 'CURR_PROD_IMAGE_TAG', defaultValue: 'latest', description: 'Image tag of current production environment')
        string(name: 'NEW_PROD_IMAGE_TAG', defaultValue: 'latest', description: 'The tag of the image to deploy to production environment')

    }

    environment {
        ARM_SUBSCRIPTION_ID = "afa1a461-3f97-478d-a062-c8db00c98741"
        ACR_LOGIN_SERVER = "adrwalacr.azurecr.io"
        ACR_USER_PASS_CREDS_ID = 'ACR-user-pass'
        AZURE_DB_CREDS = credentials('azure-db-user-pass')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform-prod') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform plan to create new staging environment') {
            steps {
                dir('terraform-prod') {
                    sh 'terraform plan -no-color -out=create-staging.out -var regenerate_image=true -var deploy_tag=${CURR_PROD_IMAGE_TAG} -var staging_deploy_tag=${STAGING_IMAGE_TAG} -var azure_db_login=${AZURE_DB_CREDS_USR} -var azure_db_password=${AZURE_DB_CREDS_PSW}'
                }
            }
        }

        stage('Confirm staging Terraform apply') {
            steps {
                script {
                    def userInput = input(
                        id: 'confirm',
                        message: 'Do you want to apply the Terraform plan?',
                        parameters: [
                            booleanParam(defaultValue: false, description: 'Apply the Terraform plan?', name: 'confirm')
                        ]
                    )
                    if (!userInput) {
                        error('Pipeline aborted by user')
                    }
                }
            }
        }

        stage('Terraform Apply staging') {
            steps {
                dir('terraform-prod') {
                    sh 'terraform apply -no-color -auto-approve create-staging.out'
                }
            }
        }

        stage('Terrafrom plan deploy to production') {
            steps {
                dir('terraform-prod') {
                    sh 'terraform plan -no-color -out=deploy-production.out -var regenerate_image=true -var deploy_tag=${NEW_PROD_IMAGE_TAG} -var staging_deploy_tag=${STAGING_IMAGE_TAG} -var azure_db_login=${AZURE_DB_CREDS_USR} -var azure_db_password=${AZURE_DB_CREDS_PSW}'
                }
            }
        }

        stage('Confirm prod Terraform apply') {
            steps {
                script {
                    def userInput = input(
                        id: 'confirm',
                        message: 'Do you want to apply the Terraform plan?',
                        parameters: [
                            booleanParam(defaultValue: false, description: 'Apply the Terraform plan?', name: 'confirm')
                        ]
                    )
                    if (!userInput) {
                        error('Pipeline aborted by user')
                    }
                }
            }
        }

        stage('Terraform Apply prod') {
            steps {
                dir('terraform-prod') {
                    sh 'terraform apply -no-color -auto-approve deploy-production.out'
                }
            }
        }

        stage('Confirm production databse is accessible') {
            steps {
                sh'mysqladmin -h adrwal-mysql-fs.mysql.database.azure.com -u ${AZURE_DB_CREDS_USR} -p${AZURE_DB_CREDS_PSW} ping'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
